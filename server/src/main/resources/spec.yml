openapi: 3.0.0
info:
  title: donor API
  version: 0.0.0

tags:
  - name: Auth
    description: Authentication and session management


paths:
  # *******************************************************************************
  #                           Account
  # *******************************************************************************
  /api/account/:
    get:
      operationId: listAccounts
      parameters:
        - $ref: '#/components/parameters/page-q'
        - $ref: '#/components/parameters/pageSize-q'
      tags:
        - Account
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPaginationListData'
    post:
      operationId: createAccount
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRegisterData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountData'

  /api/account/{accountId}:
    get:
      operationId: getAccount
      parameters:
        - $ref: '#/components/parameters/accountId'
      tags:
        - Account
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountData'
    post:
      operationId: updateAccount
      parameters:
        - $ref: '#/components/parameters/accountId'
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountData'

  # *******************************************************************************
  #                           Auth
  # *******************************************************************************
  /api/register-account:
    post:
      operationId: registerAccount
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRegisterData'
      responses:
        '200':
          description: Result

  /api/checkSession:
    post:
      operationId: checkSession
      tags:
        - Auth
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfoData'

  /api/confirm-account/{confirmToken}:
    get:
      operationId: confirmAccount
      parameters:
        - $ref: '#/components/parameters/confirmToken'
      tags:
        - Auth
      responses:
        '200':
          description: Result


  /api/login:
    post:
      operationId: login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfoData'

  /api/logout:
    post:
      operationId: logout
      tags:
        - Auth
      responses:
        '200':
          description: Result

  # *******************************************************************************
  #                           Map
  # *******************************************************************************

  /api/getAllPoint:
    get:
      operationId: getAllPointer
      tags:
        - Map
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapPointData'

  /api/getFullInfo:
    post:
      operationId: getFullInfo
      tags:
        - Map
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapPointData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapPointerFullInfoData'

  /api/mapPoint:
    post:
      operationId: addPoint
      tags:
        - Map
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapPointerFullInfoData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapPointData'
    put:
      operationId: editPoint
      tags:
        - Map
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapPointerFullInfoData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapPointerFullInfoData'


  /api/deleteMapPoint:
    post:
      operationId: deletePoint
      tags:
        - Map
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapPointData'
      responses:
        '200':
          description: Result

  # *******************************************************************************
  #                           Pet
  # *******************************************************************************
  /api/{petId}/pets/:
    get:
      operationId: getPets
      parameters:
        - $ref: '#/components/parameters/petId'
      tags:
        - Pet
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetData'
    post:
      operationId: createPet
      parameters:
        - $ref: '#/components/parameters/petId'
      tags:
        - Pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePetData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetData'

  /api/pet/{petId}:
    put:
      operationId: updatePet
      parameters:
        - $ref: '#/components/parameters/petId'
      tags:
        - Pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetData'
    post:
      operationId: addDonation
      parameters:
        - $ref: '#/components/parameters/petId'
      tags:
        - Pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetData'

  /api/pet/{petId}/confirm:
    get:
      operationId: confirmPets
      parameters:
        - $ref: '#/components/parameters/petId'
      tags:
        - Pet
      responses:
        '200':
          description: Result

  # *******************************************************************************
  #                           News
  # *******************************************************************************

  /api/news/:
    get:
      operationId: listNews
      parameters:
        - $ref: '#/components/parameters/page-q'
        - $ref: '#/components/parameters/pageSize-q'
      tags:
        - News
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsPaginationListData'
    post:
      operationId: createNews
      tags:
        - News
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsFullData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsFullData'

  /api/news/{newsId}:
    get:
      operationId: getNews
      parameters:
        - $ref: '#/components/parameters/newsId'
      tags:
        - News
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsFullData'
    post:
      operationId: updateNews
      parameters:
        - $ref: '#/components/parameters/newsId'
      tags:
        - News
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsFullData'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsFullData'


components:
  parameters:
    confirmToken:
      name: confirmToken
      in: path
      description: confirmToken.
      required: true
      schema:
        type: string

    accountId:
      name: accountId
      in: path
      description: Account identifier.
      required: true
      schema:
        type: integer
        format: int64

    page-q:
      name: page
      in: query
      description: Page number.
      required: false
      schema:
        type: integer
    pageSize-q:
      name: pageSize
      in: query
      description: Page size.
      required: false
      schema:
        type: integer

    petId:
      name: petId
      in: path
      description: pet identifier.
      required: true
      schema:
        type: integer
        format: int64

    newsId:
      name: newsId
      in: path
      description: news identifier.
      required: true
      schema:
        type: integer
        format: int64

  schemas:

    NewsPaginationListData:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/NewsData'
        page:
          type: integer
        pageSize:
          type: integer
        totalCount:
          type: integer


    AccountPaginationListData:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountData'
        page:
          type: integer
        pageSize:
          type: integer
        totalCount:
          type: integer

    NewsData:
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        photo:
          type: object
        summer:
          type: string
        theme:
          type: string
        data:
          type: string

    NewsFullData:
      properties:
        newsData:
          $ref: '#/components/schemas/NewsData'
        text:
          type: string

    PetData:
      properties:
        id:
          type: integer
          format: int64
        accountId:
          type: integer
          format: int64
        petType:
          type: string
          enum:
            - cat
            - dog
        confirmed:
          type: boolean
        age:
          type: integer
        weight:
          type: integer
        name:
          type: string
        photo:
          type: object
        passport:
          type: object
        donations:
          type: array
          items:
            $ref: '#/components/schemas/DonationData'

    CreatePetData:
      properties:
        accountId:
          type: integer
          format: int64
        petType:
          type: string
          enum:
            - cat
            - dog
        name:
          type: string

    DonationData:
      properties:
        id:
          type: integer
          format: int64
        data:
          type: string



    AccountRegisterData:
      properties:
        displayName:
          type: string
        login:
          type: string
        password:
          type: string

    LoginRequestData:
      properties:
        login:
          type: string
        password:
          type: string

    MapPointData:
      properties:
        id:
          type: integer
          format: int64
        tal:
          type: number
          format: double
        lng:
          type: number
          format: double

    MapPointerFullInfoData:
      properties:
        mapPoint:
          $ref: "#/components/schemas/MapPointData"
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        info:
          type: string
        important:
          type: string
        time:
          type: string
        photo:
          type: string

    SessionInfoData:
      properties:
        sessionId:
          type: string
        accountId:
          type: integer
          format: int64
        role:
          type: string
        displayName:
          type: string
        login:
          type: string

    AccountData:
      properties:
        id:
          type: integer
          format: int64
        displayName:
          type: string
        active:
          type: boolean
        confirmed:
          type: boolean
        role:
          type: string
        phone:
          type: string
        city:
          type: string
        bio:
          type: string
        photo:
          type: object



  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: [ ]